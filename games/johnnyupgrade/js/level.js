var sprt; var bossData; var plats; var platMoves; var logs; var spikes; var bumpers; var pars; var sfx; var levl = 1; var p; var coins; var coinsUp; var coinCT; var gamePad; var spaceKey; var cursors; var wasd; var tuts; var tim; var clck; var dsp; var areas; var bombs; var nrg; var lasers; var enes; var bullets; var isprt; var maps = [null, {plats: [{x: -720, y: 360, w: 1790, h: 200, semi: undefined, right: 1070, bottom: 560},{x: -1190, y: -180, w: 300, h: 2230, semi: undefined, right: -890, bottom: 2050},{x: 1780, y: 240, w: 560, h: 550, semi: undefined, right: 2340, bottom: 790},{x: -790, y: -540, w: 3750, h: 370, semi: undefined, right: 2960, bottom: -170},{x: 1070, y: 480, w: 330, h: 80, semi: undefined, right: 1400, bottom: 560},{x: 1400, y: 360, w: 400, h: 200, semi: undefined, right: 1800, bottom: 560},{x: 2930, y: -250, w: 80, h: 1160, semi: undefined, right: 3010, bottom: 910},{x: 1330, y: 1010, w: 2106.9, h: 300, semi: undefined, right: 3436.9, bottom: 1310},{x: -890, y: 300, w: 300, h: 100, semi: undefined, right: -590, bottom: 400},{x: 2340, y: 370, w: 220, h: 100, semi: undefined, right: 2560, bottom: 470},{x: 2710, y: 590, w: 700, h: 100, semi: undefined, right: 3410, bottom: 690},{x: 2730, y: 910, w: 100, h: 120, semi: undefined, right: 2830, bottom: 1030},{x: 3350, y: 590, w: 100, h: 1929.9, semi: undefined, right: 3450, bottom: 2519.9},{x: 3110, y: 690, w: 140, h: 100, semi: undefined, right: 3250, bottom: 790},{x: 1120, y: 770, w: 660, h: 20, semi: 1, right: 1780, bottom: 790},{x: -1478.7, y: 2240, w: 4838.7, h: 300, semi: undefined, right: 3360, bottom: 2540},{x: 100.2, y: 1610, w: 1339.8, h: 200, semi: undefined, right: 1440, bottom: 1810},{x: 1330, y: 1310, w: 760, h: 500, semi: undefined, right: 2090, bottom: 1810},{x: 180, y: 740, w: 200, h: 870, semi: undefined, right: 380, bottom: 1610},{x: -1620, y: -429.65, w: 300, h: 2969.7000000000003, semi: undefined, right: -1320, bottom: 2540.05},{x: -480.05, y: 740, w: 660.1, h: 80, semi: undefined, right: 180.05, bottom: 820},{x: -899.55, y: 1130, w: 880.3, h: 80, semi: undefined, right: -19.25, bottom: 1210},{x: -410, y: 1500, w: 100, h: 100, semi: undefined, right: -310, bottom: 1600},{x: -210, y: 1710, w: 100, h: 100, semi: undefined, right: -110, bottom: 1810},{x: -610, y: 1710, w: 100, h: 100, semi: undefined, right: -510, bottom: 1810},{x: -410, y: 1920, w: 100, h: 100, semi: undefined, right: -310, bottom: 2020},{x: 1770, y: 2050, w: 320, h: 240, semi: undefined, right: 2090, bottom: 2290},{x: -1320, y: -430, w: 540, h: 100, semi: undefined, right: -780, bottom: -330},{x: 3010, y: 230, w: 440.0999999999999, h: 360, semi: undefined, right: 3450.1, bottom: 590},{x: 410, y: 1810, w: 70, h: 230, semi: undefined, right: 480, bottom: 2040},{x: 1470, y: 1810, w: 70, h: 230, semi: undefined, right: 1540, bottom: 2040},{x: 470, y: 1960, w: 400, h: 80, semi: undefined, right: 870, bottom: 2040},{x: 1070, y: 1960, w: 400, h: 80, semi: undefined, right: 1470, bottom: 2040},{x: 210, y: -420, w: 480, h: 420, semi: undefined, stomper: true, right: 690, bottom: 0},{x: 1990, y: 1570, w: 100, h: 250, semi: undefined, right: 2090, bottom: 1820}], coins:[{x:-310, y:300},{x:40, y:300},{x:120, y:300},{x:200, y:300},{x:-360, y:220},{x:-410, y:300},{x:-480, y:220},{x:-530, y:300},{x:-600, y:160},{x:-650, y:240},{x:480, y:300},{x:1060, y:270},{x:1420, y:310},{x:1340, y:220},{x:1240, y:190},{x:1140, y:220},{x:-700, y:160},{x:-750, y:240},{x:-800, y:160},{x:2780, y:840},{x:2870, y:860},{x:2880, y:950},{x:2970, y:960},{x:3060, y:960},{x:3060, y:880},{x:3060, y:810},{x:3140, y:960},{x:3220, y:960},{x:3300, y:960},{x:3300, y:880},{x:3300, y:810},{x:3060, y:740},{x:3300, y:740},{x:430, y:840},{x:720, y:1350},{x:720, y:1430},{x:430, y:920},{x:430, y:1000},{x:430, y:1080},{x:430, y:1160},{x:430, y:1240},{x:430, y:1320},{x:430, y:1400},{x:430, y:1480},{x:430, y:1560},{x:800, y:1350},{x:800, y:1430},{x:880, y:1350},{x:880, y:1430},{x:960, y:1350},{x:960, y:1430},{x:1040, y:1350},{x:1040, y:1430},{x:1120, y:1350},{x:1120, y:1430},{x:1200, y:1350},{x:1200, y:1430},{x:1280, y:1350},{x:1280, y:1430},{x:1650, y:610},{x:1650, y:710},{x:1730, y:610},{x:1730, y:710},{x:1490, y:610},{x:1490, y:710},{x:1570, y:610},{x:1570, y:710},{x:1330, y:610},{x:1330, y:710},{x:1410, y:610},{x:1410, y:710},{x:720, y:1270},{x:800, y:1270},{x:880, y:1270},{x:960, y:1270},{x:1040, y:1270},{x:1120, y:1270},{x:1200, y:1270},{x:1280, y:1270},{x:1170, y:610},{x:1170, y:710},{x:1250, y:610},{x:1250, y:710},{x:120, y:880},{x:30, y:880},{x:-60, y:880},{x:-150, y:880},{x:-240, y:880},{x:-330, y:880},{x:-420, y:880},{x:-330, y:970},{x:-150, y:970},{x:30, y:970},{x:-850, y:240},{x:-650, y:80},{x:-750, y:80},{x:-850, y:80},{x:790, y:300},{x:870, y:300},{x:830, y:230},{x:1740, y:180},{x:1670, y:180},{x:1740, y:110},{x:1670, y:110},{x:1900, y:180},{x:1900, y:110},{x:1970, y:180},{x:1970, y:110},{x:1900, y:40},{x:1970, y:40},{x:2300, y:180},{x:2390, y:310},{x:2460, y:310},{x:2530, y:310},{x:2760, y:540},{x:2830, y:540},{x:2230, y:900},{x:2300, y:900},{x:2090, y:900},{x:2160, y:900},{x:1950, y:900},{x:2020, y:900},{x:1880, y:900},{x:220, y:690},{x:310, y:690},{x:310, y:610},{x:220, y:610},{x:-5, y:690},{x:-235, y:690},{x:-360, y:1760},{x:-450, y:1760},{x:-270, y:1760},{x:-360, y:1670},{x:-360, y:1850},{x:-830, y:1270},{x:-750, y:1270},{x:-670, y:1270},{x:-590, y:1270},{x:-790, y:1320},{x:-710, y:1320},{x:-630, y:1320},{x:-550, y:1320},{x:-830, y:1370},{x:-750, y:1370},{x:-670, y:1370},{x:-590, y:1370},{x:-790, y:1420},{x:-710, y:1420},{x:-630, y:1420},{x:-550, y:1420},{x:-830, y:1470},{x:-750, y:1470},{x:-670, y:1470},{x:-590, y:1470},{x:-790, y:1520},{x:-710, y:1520},{x:-630, y:1520},{x:-550, y:1520},{x:-830, y:1570},{x:-750, y:1570},{x:-670, y:1570},{x:-590, y:1570},{x:-790, y:1620},{x:-710, y:1620},{x:-630, y:1620},{x:-550, y:1620},{x:-830, y:1670},{x:-750, y:1670},{x:-670, y:1670},{x:-590, y:1670},{x:-790, y:1720},{x:-710, y:1720},{x:-500, y:1470},{x:-500, y:1570},{x:-500, y:1370},{x:-360, y:1430},{x:-360, y:1350},{x:-360, y:1270},{x:-830, y:1770},{x:-750, y:1770},{x:-790, y:1830},{x:1210, y:660},{x:1290, y:660},{x:1370, y:660},{x:1610, y:660},{x:1690, y:660},{x:1530, y:660},{x:760, y:1200},{x:840, y:1200},{x:920, y:1200},{x:1000, y:1200},{x:1080, y:1200},{x:1160, y:1200},{x:1240, y:1200},{x:520, y:1920},{x:520, y:1840},{x:560, y:1880},{x:600, y:1920},{x:600, y:1840},{x:640, y:1880},{x:680, y:1920},{x:680, y:1840},{x:720, y:1880},{x:760, y:1920},{x:760, y:1840},{x:800, y:1880},{x:840, y:1920},{x:840, y:1840},{x:880, y:1880},{x:920, y:1920},{x:920, y:1840},{x:1030, y:1920},{x:1030, y:1840},{x:1070, y:1880},{x:1110, y:1920},{x:1110, y:1840},{x:1150, y:1880},{x:1190, y:1920},{x:1190, y:1840},{x:1230, y:1880},{x:1270, y:1920},{x:1270, y:1840},{x:1310, y:1880},{x:1350, y:1920},{x:1350, y:1840},{x:1390, y:1880},{x:1430, y:1920},{x:1430, y:1840},{x:-790, y:1930},{x:-790, y:2030},{x:140, y:1880},{x:140, y:1980},{x:190, y:1930},{x:270, y:1930},{x:350, y:1930},{x:230, y:1980},{x:310, y:1980},{x:-1255, y:390},{x:-1255, y:450},{x:-1255, y:510},{x:-1255, y:1050},{x:-1255, y:1140},{x:-1255, y:1230},{x:-1255, y:1590},{x:-1255, y:1740},{x:-1255, y:1920}], sprt: {x:-123.6, y:359,xx: 1}, colGun: {x:-805, y:487}, spikes:[{x: 1100, y: 420, w: 270, h: 60},{x: 1620, y: 330, w: 60, h: 30},{x: 1710, y: 290, w: 60, h: 70},{x: 2900, y: 390, w: 30, h: 180},{x: 3130, y: 790, w: 100, h: 30},{x: 180, y: 1810, w: 60, h: 30},{x: 260, y: 1810, w: 60, h: 50},{x: 340, y: 1810, w: 60, h: 60}], platMove:[{x: 1120, y: 1010, xx: 3, yy: 0, xmin: 880, xmax: 1120, ymin: 1010, ymax: 1050},{x: 580, y: 1110, xx: 0, yy: 6, xmin: 560, xmax: 600, ymin: 780.35, ymax: 1479.65},{x: -770, y: 770, xx: 0, yy: 4, xmin: -790, xmax: -750, ymin: 730.05, ymax: 1005.55}], bombs:[{x: 2695, y: 380, xo: 2695, yo: 440, xxsi: -0.03, yysi: 0.03, xmax: 105, ymax: 210},{x: 2120, y: 10, xo: 2120, yo: 70, xxsi: -0.02, yysi: 0.04, xmax: 43, ymax: 110.95},{x: -110, y: 1430, xo: -110, yo: 1490, xxsi: -0.02, yysi: 0.04, xmax: 129.8, ymax: 150.2}], lasers:[{x: 2635, y: 760, ctMax:100, ctSwitch: 60, ctCurr: 66},{x: 110, y: 650, ctMax:100, ctSwitch: 60, ctCurr: 100},{x: -120, y: 650, ctMax:100, ctSwitch: 60, ctCurr: 50},{x: -350, y: 650, ctMax:100, ctSwitch: 60, ctCurr: 100}], enes:[{x: 1830, y: 790, typ: 'saw', xx: 6.4, yy: 0, xmin: 1830, xmax: 2230, ymin: 770, ymax: 810},{x: 2290, y: 1010, typ: 'saw', xx: 6.4, yy: 0, xmin: 1890, xmax: 2290, ymin: 990, ymax: 1030},{x: 1029, y: 1611, typ: 'robot', xx: 4.800000000000001, yy: 0, xmin: 730.05, xmax: 1289.95, ymin: 1590, ymax: 1630},{x: -308, y: 1131, typ: 'robot', xx: 4.800000000000001, yy: 0, xmin: -608.25, xmax: -48.35000000000002, ymin: 1109, ymax: 1149},{x: 920, y: 2240, typ: 'robot', xx: 4.800000000000001, yy: 0, xmin: 490.54999999999995, xmax: 942.05, ymin: 2219, ymax: 2259},{x: -180, y: 2240, typ: 'robot', xx: 4.800000000000001, yy: 0, xmin: -218.25, xmax: 341.65, ymin: 2229, ymax: 2269},{x: -550, y: 2241, typ: 'robot', xx: 4.800000000000001, yy: 0, xmin: -1078.25, xmax: -518.3499999999999, ymin: 2219, ymax: 2259},{x: 1220, y: 2240, typ: 'robot', xx: 4.800000000000001, yy: 0, xmin: 1181.4, xmax: 1650.4, ymin: 2225, ymax: 2265}], areas:[{l: -879.85, t: -90, r: 680.15, b: 340, xx: 320, yy: 400, xmin: 0, xmax: 0, ymin: 0, ymax: 0},{l: 860, t: -160, r: 1754.2, b: 336, xx: 300, yy: 240, xmin: 0, xmax: 0, ymin: 0, ymax: 0},{l: 2399.9, t: -190, r: 2910.1, b: 570.1, xx: 300, yy: 140, xmin: 0, xmax: 3000, ymin: 0, ymax: 0},{l: 1830.1, t: 820, r: 2942.2, b: 1011.7, xx: 400, yy: 380, xmin: 0, xmax: 3500, ymin: 0, ymax: 0},{l: 399.8, t: 811.15, r: 1719.7, b: 1002.85, xx: 400, yy: 240, xmin: 0, xmax: 0, ymin: 0, ymax: 0},{l: 374.8, t: 1524.15, r: 1330, b: 1715.85, xx: 320, yy: 320, xmin: 0, xmax: 0, ymin: 0, ymax: 1690},{l: 1119.8, t: 569.85, r: 1773.1, b: 691.85, xx: 400, yy: 300, xmin: 0, xmax: 0, ymin: 510, ymax: 0},{l: -869.75, t: 1060, r: 160.04999999999995, b: 1160, xx: 400, yy: 240, xmin: -1000, xmax: 0, ymin: 0, ymax: 0},{l: -1321.35, t: 2099.8, r: 1429.5499999999997, b: 2291.5, xx: 200, yy: 260, xmin: -1500, xmax: 0, ymin: 0, ymax: 2330},{l: -1373.5, t: -17.7, r: -1173.5, b: 776.6, xx: 320, yy: 100, xmin: -1500, xmax: 0, ymin: 0, ymax: 0},{l: -536.1, t: 528.3, r: 380, b: 720, xx: 400, yy: 270, xmin: 0, xmax: 0, ymin: 0, ymax: 0},{l: 1826.3, t: -204.05, r: 2322.3, b: 291.95, xx: 300, yy: 320, xmin: 0, xmax: 0, ymin: 0, ymax: 0},{l: 2180, t: 1740, r: 3412.3, b: 2219.8, xx: 320, yy: 240, xmin: 1920, xmax: 3400, ymin: 0, ymax: 2320},{l: -931.85, t: 552.05, r: -529.95, b: 799.95, xx: 400, yy: 400, xmin: -1000, xmax: 0, ymin: 0, ymax: 0},{l: -1371.95, t: -331.95, r: -790.15, b: -140.05, xx: 320, yy: 400, xmin: -1500, xmax: 0, ymin: 0, ymax: 0}], bossData:{gate: {l:1910,r: 2081.1,t: 1829.1,b: 2029.1}, range: {l:2090,r: 3350,t: 2200,b: 2240}}, door: {l:1990,r: 2090,t: 1570,b: 1820}} ]; function addLevelSFX(){sfx = new Object; sfx.fxChing = game.add.audio('fxChing', 0.6); sfx.fxQuake = game.add.audio('fxQuake', 1.2); sfx.fxJump = game.add.audio('fxJump', 1.5); sfx.fxYykes = game.add.audio('fxYykes', 0.6); sfx.fxBomb1 = game.add.audio('fxBomb1', 0.9); sfx.fxBomb2 = game.add.audio('fxBomb2', 0.9); sfx.fxStep1 = game.add.audio('fxStep1', 0.7); sfx.fxStep2 = game.add.audio('fxStep2', 0.7); sfx.fxFanfare = game.add.audio('fxFanfare', 0.8); sfx.fxLaser = game.add.audio('fxLaser', 0.8); sfx.fxRico = game.add.audio("fxRico",0.09); sfx.fxBoulder = game.add.audio("fxBoulder",0.6); sfx.fxHuh = game.add.audio("fxHuh",0.9); sfx.fxSpawnLoop = game.add.audio("fxSpawnLoop",0.9, true); sfx.fxBossShootLoop = game.add.audio("fxBossShootLoop",0.8, true); sfx.fxBossShoot = game.add.audio("fxBossShoot", 1); sfx.fxBoulder = game.add.audio("fxBoulder", 0.5); sfx.fxYes = game.add.audio("fxYes", 1); } var LevelState = {preload: function(){settings(this); game.stage.backgroundColor = "#000000"; }, create: function() {muPlay('muIngame', 0.4, true); game.scale.setGameSize(levelScreenWidth, levelScreenHeight); tim = Math.round(game.ldat.tim.v * 10 * 6 + 3); jumpMax = game.ldat.jmp2.v+1; cursors = game.input.keyboard.createCursorKeys(); wasd = {up: game.input.keyboard.addKey(Phaser.Keyboard.W), down: game.input.keyboard.addKey(Phaser.Keyboard.S), left: game.input.keyboard.addKey(Phaser.Keyboard.A), right: game.input.keyboard.addKey(Phaser.Keyboard.D), }; world = this; world.doneCT = null; world.q = null; pars = []; plats = []; logs = []; spikes = []; bumpers = []; isprt = game.add.group(); game.input.onDown.add(controlDown, this); game.input.onUp.add(controlUp, this); bullets = []; sprt = isprt.create(this.game.world.centerX,450, 'sprt'); sprt.area = {}; sprt.inv = 0; sprt.kolH = 90; sprt.kolW = 30; sprt.zf = 1; sprt.scale.setTo(0.8, 0.7); sprt.scaleX = 1; sprt.spd = 0.8 + 2 * game.ldat.spd.v; sprt.animations.add('idle', [0,1,2,3], 6); sprt.animations.add('run', [4,5,6,7,8,9,10,11,12,13,14,15,16,17], 22); sprt.animations.add('jump', [18], 1); sprt.animations.add('fall', [19], 1); sprt.animations.add('dd', [20], 1); sprt.animations.add('qm', [21], 1); sprt.play('idle',null,true); sprt.anchor.setTo(0.5, 0.85); sprt.xx = 0; sprt.xxx = 0; sprt.yy = 1; sprt.hSize = sprt.width / 2; sprt.ju = 0; sprt.jh = game.ldat.jmp.v * -11 - 12; iniLevel(); spaceKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR); spaceKey.hold = null; areaCode(); gravCode(); scrollCode(1); game.camera.xy = null; if(game.ldat.wpn.v){getGun(); } addBossPowBar(); }, update: function(){bossCode(); colgunCode(); invCode(); clockCode(); coinCode(); stomperCode(); platMoveCode(); areaCode(); bombCode(); laserCode(); eneCode(); bulletCode(); if(world.doneCT){world.doneCT += 1; } controls(); leftRightCode(); gravCode(); spikeCode(); saniCode(); if(!sprt.dd){scrollCode(12); } quakeCode(); parCode(); bgCode(); escCode(); }, render: function(){rotDeviceCheck(); if(game.paused || rotDevice){ return;} if(world.doneCT){if(world.doneCT > 158){world.doneCT = null; saveStats(); levl = -1; newState(); } } } }; function coinCode(){coinsUpCode(); if(sprt.dd){return;} for (var i = 0; i < coins.length; i++) {var c = coins[i]; if(sprtHitTest(c)){fxPlay(sfx.fxChing); coinCT++; game.ldat.csh.v += 1 + game.ldat.multi.v * 5; updateCoinTxt(); coinsUp.push(c); coins.splice(i,1); i--; } } } function updateCoinTxt(){dsp.cns.setText(Math.floor(game.ldat.csh.v)); } function coinsUpCode(){for (var i = 0; i < coinsUp.length; i++) {var c = coinsUp[i]; c.y -= 20; if(c.y + 60 < game.camera.y){coinsUp.splice(i,1); i--; c.destroy(); } } } function bombCode(){for (var i = 0; i < bombs.length; i++) {var b = bombs[i]; b.y = b.yo + Math.sin(b.ysi) * b.ymax; b.ysi += b.yysi; b.x = b.xo + Math.sin(b.xsi) * b.xmax; b.angle = (b.x - b.xprev) * 8; b.xprev = b.x; b.xsi += b.xxsi; getBoundsByOffset(b, {l:-40,t:-40,r:40,b:40}); } } function getBoundsByOffset(ob,offsets){ob.l = ob.x + offsets.l; ob.t = ob.y + offsets.t; ob.r = ob.x + offsets.r; ob.b = ob.y + offsets.b; } function areaCode(){if(sprt.dd){return;} for (var i = 0; i < areas.length; i++) {var area = areas[i]; if(sprtHitTest(area)){game.ldat.ars[areas.indexOf(area)] = 1; sprt.area.centerX = area.xx * 1.25; sprt.area.centerY = area.yy * 1.25; sprt.area.xmin = area.xmin; sprt.area.xmax = area.xmax; sprt.area.ymin = area.ymin; sprt.area.ymax = area.ymax; } } } function scrollCode(smoothness){if(isprt.noScroll){return; } game.camera.x += (sprt.x - sprt.area.centerX - game.camera.x + sprt.scale.x * 120) / smoothness; game.camera.y += (sprt.y - sprt.area.centerY - game.camera.y + sprt.yy * 4) / smoothness; scrollLimit(); } function scrollLimit(){if(sprt.area.ymin && game.camera.y < sprt.area.ymin){game.camera.y = sprt.area.ymin; } if(sprt.area.ymax && game.camera.y > sprt.area.ymax - game.camera.height + 40){game.camera.y = sprt.area.ymax - game.camera.height + 40; } if(sprt.area.xmin && game.camera.x < sprt.area.xmin){game.camera.x = sprt.area.xmin; } if(sprt.area.xmax && game.camera.x > sprt.area.xmax - game.camera.width){game.camera.x = sprt.area.xmax - game.camera.width; } } function platMoveCode(){for (var i = 0; i < platMoves.length; i++) {var platMove = platMoves[i]; var xDel = platMove.xx * 0.8; platMove.x += xDel; if(sprt.platUnder == platMove){sprt.x += xDel; } if(platMove.x < platMove.xmin || platMove.x > platMove.xmax){platMove.xx *= -1; } var yDel = platMove.yy * 0.7; platMove.y += yDel; if(platMove.y < platMove.ymin){platMove.y = platMove.ymin; platMove.yy *= -1; } if(platMove.y > platMove.ymax){platMove.y = platMove.ymax; platMove.yy *= -1; } platMoveGetNewBounds(platMove); if(sprt.platUnder == platMove){sprt.y = platMove.t + 4; } } } function platMoveGetNewBounds(platMove){platMove.l = platMove.x - 100; platMove.t = platMove.y + 4; platMove.r = platMove.x + 100; platMove.b = platMove.y + 60; } function stomperCode(){if(!game.stomper){return;} if(!game.stomper.fall && sprt.y <= 360 && sprt.x > game.stomper.xmin && sprt.x < game.stomper.xmax){game.stomper.fall = true; } if(game.stomper.fall){game.stomper.yy += 0.25; game.stomper.y += Math.round(game.stomper.yy); getNewBounds(game.stomper); if(!sprt.dd && sprtHitTest(game.stomper)){killSprite(game.stomper, 10); } if(game.stomper.y >= -60){fxPlay(sfx.fxQuake); game.stomper.y = -60; getNewBounds(game.stomper); game.stomper = null; world.q = 40; } } } function getNewBounds(ob){ob.left = ob.l = ob.x; ob.top = ob.t = ob.y; ob.right = ob.r = ob.x + ob.width; ob.bottom = ob.b = ob.y + ob.height; } function iniLevel(){var ldat = maps[levl]; world.scroll = ldat.scroll; var spikeArray = ldat.spikes; var si = 0; for (var i = 0; i < spikeArray.length; i++) {var ob = spikeArray[i]; var s = {}; s.l = ob.x; s.t = ob.y; s.r = ob.x + ob.w; s.b = ob.y + ob.h; spikes.push(s); } coins = []; coinsUp = []; coinCT = 0; var coinArray = ldat.coins; var si = 0; for (var i = 0; i < coinArray.length; i++) {var ob = coinArray[i]; var c = isprt.create(ob.x,ob.y, 'coin'); c.animations.add('idle', [0,1,2,3,4,5,6,7], 8); c.play('idle',null,true); c.anchor.setTo(0.5); c.autoCull = true; c.kolSize = 24; c.kolSizeY = 24; c.l = c.x - c.kolSize; c.r = c.x + c.kolSize; c.t = c.y - c.kolSizeY; c.b = c.y + c.kolSizeY; coins.push(c); } bossData = ldat.bossData; game.door = isprt.create(ldat.door.l, ldat.door.t, 'door'); iniBoss(); var platArray = ldat.plats; for (var i = 0; i < platArray.length; i++) {var ob = platArray[i]; var plat; if(ob.stomper){plat = isprt.create(ob.x,ob.y, 'stomper'); plat.stomper = true; plat.yy = 0; game.stomper = plat; game.stomper.xmin = ob.x + 200; game.stomper.xmax = ob.x + 280; } else{plat = {}; } plat.width = ob.w; plat.height = ob.h; plat.l = ob.x; plat.t = ob.y; plat.r = ob.right; plat.b = ob.bottom; if(ob.semi){plat.semi = 1; } plats.push(plat); } platMoves = []; var platMoveArray = ldat.platMove; for (var i = 0; i < platMoveArray.length; i++) {var ob = platMoveArray[i]; var platMove = isprt.create(ob.x,ob.y, 'platMove'); for(var k in ob) platMove[k] = ob[k]; platMove.anchor.setTo(0.5,0); platMove.semi = true; platMove.animations.add('idle',[0,1,2,3,4,5],15); platMove.play('idle',null,true); platMove.l = platMove.x - 100; platMove.t = platMove.y + 4; platMove.r = platMove.x + 100; platMove.b = platMove.y + 100; platMoves.push(platMove); plats.push(platMove); } lasers = []; var laserArray = ldat.lasers; for (var i = 0; i < laserArray.length; i++) {var ob = laserArray[i]; var laser = isprt.create(ob.x,ob.y, 'laser'); for(var k in ob) laser[k] = ob[k]; laser.anchor.setTo(0.5); getBoundsByOffset(laser, {l:-20,t:-90,r:20,b:90}); if(lasers.length == 0){laser.height = 590; laser.angle = 90; getBoundsByOffset(laser, {l:-295,t:-20,r:295,b:20}); } lasers.push(laser); spikes.push(laser); } enes = []; var eneArray = ldat.enes; for (var i = 0; i < eneArray.length; i++) {var ob = eneArray[i]; var ene; if(ob.typ == 'robot'){ene = isprt.create(ob.x,ob.y, 'sheetRobot'); ene.robot = true; ene.anchor.setTo(0.5, 1); ene.animations.add('idle',[0,1,2],8); ene.kol = {l:-40,t:-120,r:40,b:0}; } if(ob.typ == 'saw'){ene = isprt.create(ob.x,ob.y, 'sheetSaw'); ene.saw = true; ene.anchor.setTo(0.5); ene.animations.add('idle',[0,1,2,3,4,5],24); ene.kol = {l:-30,t:-30,r:30,b:30}; } ene.ene = true; for(var k in ob) ene[k] = ob[k]; ene.play('idle',null,true); getBoundsByOffset(ene, ene.kol); enes.push(ene); spikes.push(ene); } bombs = []; var bombsArray = ldat.bombs; for (var i = 0; i < bombsArray.length; i++) {var ob = bombsArray[i]; var bomb = isprt.create(ob.x,ob.y, 'sheetBomb'); for(var k in ob) bomb[k] = ob[k]; bomb.bomb = true; bomb.anchor.setTo(0.5,0.7); bomb.animations.add('idle',[0,1,2],9); bomb.play('idle',null,true); bomb.ysi = 0; bomb.xsi = 0; bomb.xprev = bomb.x; bomb.l = bomb.x - 45; bomb.t = bomb.y - 45; bomb.r = bomb.x + 45; bomb.b = bomb.y + 45; bombs.push(bomb); spikes.push(bomb); } areas = []; var areaArray = ldat.areas; for (var i = 0; i < areaArray.length; i++) {var ob = areaArray[i]; var area = {}; for(var k in ob) area[k] = ob[k]; areas.push(area); } var logArray = ldat.bumpers; for (var i = 0; logArray && i < logArray.length; i++) {var ob = logArray[i]; var b = isprt.create(ob.x,ob.y, 'bumper'); b.anchor.setTo(0.5, 1); b.kolSize = 50; b.l = ob.x - b.kolSize; b.r = ob.x + b.kolSize; b.b = ob.y; b.t = ob.y - 80; b.animations.add('bump', [1,2,3,4,5,6,7,0], 8); bumpers.push(b); } var logArray = ldat.logs; var si = 0; for (var i = 0; i <  logArray && logArray.length; i++) {var ob = logArray[i]; var log = isprt.create(ob.x,ob.y, 'log'); log.anchor.setTo(0.5, 0.5); log.kolSize = 26; log.animations.add('idle', null, 8); log.play('idle',null,true); log.si = si; si += 2; log.yo = log.y; logs.push(log); } sprt.position.setTo(ldat.sprt.x,ldat.sprt.y); sprt.scale.x *= ldat.sprt.xx; var xo = -1620; var yo = -720; var bgfxDel = isprt.create(xo + 1710 * 0, yo + 1665 * 0, 'lvlGrfx1'); bgfxDel.autoCull = true; var bgfxDel = isprt.create(xo + 1710 * 1, yo + 1665 * 0, 'lvlGrfx2'); bgfxDel.autoCull = true; var bgfxDel = isprt.create(xo + 1710 * 2, yo + 1665 * 0, 'lvlGrfx3'); bgfxDel.autoCull = true; var bgfxDel = isprt.create(xo + 1710 * 0, yo + 1665 * 1, 'lvlGrfx4'); bgfxDel.autoCull = true; var bgfxDel = isprt.create(xo + 1710 * 1, yo + 1665 * 1, 'lvlGrfx5'); bgfxDel.autoCull = true; var bgfxDel = isprt.create(xo + 1710 * 2, yo + 1665 * 1, 'lvlGrfx6'); bgfxDel.autoCull = true; if(ldat.lbg){var lbgrx = isprt.create(ldat.lbg.x,ldat.lbg.y, ldat.lbg.txt); lbgrx.sendToBack(); } game.world.setBounds(-99999,-99999,9999999,9999999); world.limB = 9999; world.yEnd = ldat.yEnd; iniBG(); tuts = []; addDSP(); addGamepad(); iniPause(); if(!game.ldat.wpn.v){sprt.colGun = isprt.create(ldat.colGun.x, ldat.colGun.y, 'sheetGunSymb'); sprt.colGun.animations.add('idle', [0,1,2,3,4,5,6,7,8,9], 8); sprt.colGun.play('idle',null,true); sprt.colGun.anchor.setTo(0.5); getBoundsByOffset(sprt.colGun, {l:-50,t:-50,r:50,b:50}); } else{getGun(); } } function addDSP(){dsp = game.add.group(); dsp.fixedToCamera = true; var style = { font: 'gameFont', fill: '#FFFFFF', wordWrap: false, wordWrapWidth: null, align: 'center', backgroundColor: null}; dsp.tim = game.add.text(levelScreenWidth * 0.5, 0, '0', style, dsp); dsp.tim.fontSize = 52; dsp.tim.addColor('#FFFFFF'); dsp.tim.anchor.setTo(0.5, 0); dsp.tim.setShadow(0, 4, "#4A6F4D", 0, true, false); dsp.tim.stroke = '#649566'; dsp.tim.strokeThickness = 4; dsp.tim.fill = '#FFFFFF'; var c = dsp.create(10,10, 'coinSymbol'); c.animations.add('idle', [0,1,2,3,4,5,6,7], 8); c.play('idle',null,true); c.scale.x = c.scale.y = 0.6; var style = { font: 'gameFont', fill: '#FFFFFF', wordWrap: false, wordWrapWidth: null, align: 'left', backgroundColor: null }; dsp.cns = game.add.text(57, 2, '0', style, dsp); dsp.cns.fontSize = 40; dsp.cns.addColor('#FFFFFF'); dsp.cns.anchor.setTo(0, 0); dsp.cns.setShadow(0, 4, "#4A6F4D", 0, true, false); dsp.cns.stroke = '#649566'; dsp.cns.strokeThickness = 4; dsp.cns.fill = '#FFFFFF'; updateCoinTxt(); iniNRG(); var c = dsp.create(6, 52, 'dspGun'); c.anchor.setTo(0,0); c.scale.x = c.scale.y = 0.7; var style = { font: 'gameFont', fill: '#FFFFFF', wordWrap: false, wordWrapWidth: null, align: 'left', backgroundColor: null }; dsp.ammo = game.add.text(57, c.y - 4, '0', style, dsp); dsp.ammo.fontSize = 40; dsp.ammo.addColor('#FFFFFF'); dsp.ammo.anchor.setTo(0, 0); dsp.ammo.setShadow(0, 4, "#4A6F4D", 0, true, false); dsp.ammo.stroke = '#649566'; dsp.ammo.strokeThickness = 4; dsp.ammo.fill = '#FFFFFF'; dsp.ammo.sym = c; dsp.ammo.sym.visible = false; dsp.ammo.visible = false; } function iniNRG(){var xx = game.camera.width - 110; var yy = 6; nrg = []; for (var i = 0; i < game.ldat.nrg.v * 10; i++){var h = dsp.create(xx,yy, 'sheetHeart'); h.anchor.setTo(1,0); nrg.push(h); xx -=  50; } } function clockCode(){if(boss.dd || sprt.dd){return;} tim -= 1 / 60; game.ldat.stats.t++; if(tim < 1){var black = dsp.create(0,0, 'black'); black.width = game.camera.width; black.height = game.camera.height; black.alpha = 0.6; dsp.timeUp = dsp.create(game.camera.width * 0.5, game.camera.height * 0.5, 'sheetTimeUp'); dsp.timeUp.animations.add('idle', [0,0,0,1,1], 5); dsp.timeUp.play('idle',null,true); dsp.timeUp.anchor.setTo(0.5); destroySprite(1); if(sprt.qm){sprt.qm.destroy(); } } dsp.tim.setText(Math.floor(tim)); } function addGamepad(){if (game.device.desktop) {return; } gamePad = game.add.group(); dsp.add(gamePad); gamePad.btn = []; gamePad.aL = gamePad.create(0,-20, 'sheetPad'); gamePad.aL.frame = 0; gamePad.aL.inputEnabled = true; gamePad.aL.anchor.setTo(0,1); gamePad.aR = gamePad.create(0,-20, 'sheetPad'); gamePad.aR.frame = 1; gamePad.aR.inputEnabled = true; gamePad.aR.anchor.setTo(-1,1); gamePad.aU = gamePad.create(levelScreenWidth, levelScreenHeight, 'sheetPad'); gamePad.aU.frame = 3; gamePad.aU.anchor.setTo(1,1); gamePad.aU.inputEnabled = true; if(!game.ldat.spd.v){gamePad.aL.visible = false; gamePad.aR.visible = false; } if(!game.ldat.jmp.v){gamePad.aU.visible = false; } gamePad.aS = gamePad.create(levelScreenWidth, levelScreenHeight, 'sheetPad'); gamePad.aS.frame = 2; gamePad.aS.anchor.setTo(2,1); gamePad.aS.inputEnabled = true; gamePad.aS.visible = false; resetGamePad(); } function hideGamePad(){if(gamePad){gamePad.visible = false; } } function resetGamePad(){if(gamePad){gamePad.aL.y = levelScreenHeight; gamePad.aR.y = levelScreenHeight; gamePad.aU.y = levelScreenHeight; gamePad.aS.y = levelScreenHeight; } if(clck){clck.cameraOffset.setTo(game.camera.width / 2, game.camera.height - 40); } if(p && p.bg){p.bg.height = game.camera.height + 10; } if(game.btnHome){game.btnHome.y = game.camera.height / 2; game.btnMu.y = game.camera.height / 2; game.btnFX.y = game.camera.height / 2; } } function iniPause(){p = dsp.create(levelScreenWidth, 0, 'btnSettings'); p.anchor.setTo(1, 0); p.inputEnabled = true; p.events.onInputDown.add(pauseCode, world); p.esc = dsp.create(levelScreenWidth / 2, levelScreenHeight - 8, 'btnSkull'); p.esc.anchor.setTo(0.5,1); p.inputEnabled = true; p.pop = game.add.group(); dsp.add(p.pop); p.pop.visible = false; p.btn = []; p.bg = p.pop.create(0,0, 'black'); p.bg.alpha = 0.77; p.bg.width = game.camera.width; p.bg.height = game.camera.height + 10; game.btnHome = addButtons('btnHome',0); game.btnMu = addButtons('btnMu',-120); game.btnFX = addButtons('btnFX',120); setMuFXBtns(); p.bringToTop(); } function addButtons(nam,xOff){var b = p.pop.create(game.camera.width / 2 + xOff, game.camera.height / 2, nam); b.anchor.setTo(0.5,0.5); b.inputEnabled = true; p.btn.push(b); return b; } function setMuFXBtns(){if(!game.btnMu || !game.btnFX){return; } if(game.muteMu){game.btnMu.frame = 0; } else {game.btnMu.frame = 1; } if(game.muteFX){game.btnFX.frame = 0; } else {game.btnFX.frame = 1; } } function pauseCode(){muPause(); clickSound(); loopStop(); p.pop.visible = true; game.world.bringToTop(p.pop); game.world.bringToTop(p); p.frame = 1; game.paused = true; } function txtCode(txt){for (var i = 0; i < txt.length; i++) {var ob = txt[i]; var t = isprt.create(ob.x,ob.y, ob.t); t.anchor.setTo(0,1); if(ob.w){t.width = ob.w; t.height = ob.h; } if(ob.flip){t.width = -t.width; } if(ob.rot){t.angle = ob.rot; } } } function iniBG(){world.bg2 = game.add.tileSprite(0, 0, game.camera.width, game.camera.height, 'bg2'); world.bg2.fixedToCamera = true; world.bg2.sendToBack(); world.bg1 = game.add.tileSprite(0, 0, game.camera.width, game.camera.height, 'bg1'); world.bg1.fixedToCamera = true; world.bg1.sendToBack(); world.bg0 = game.add.sprite(0, 0, 'bg0'); world.bg0.width = game.camera.width; world.bg0.height = game.camera.height; world.bg0.fixedToCamera = true; world.bg0.sendToBack(); } function gravCode() {if(sprt.y > world.yEnd){hideGamePad(); removeSettingsButton(); if(!sprt.dd){sprt.dd = true; sprt.rot = 0; } if(sprt.yy > 10){sprt.yy = 10; } sprt.xx = 0; sprt.noControl = true; sprt.rot += 0.1 * sprt.scale.x; sprt.angle += Math.sin(sprt.rot)*20; } sprt.yy += 1; if(sprt.yy > 90){sprt.yy = 90; } sprt.position.y += sprt.yy; if(sprt.dd){return; } sprt.platUnder = null; var newYY = sprt.yy; var newY = sprt.y; var delPlat = []; for (var i = 0; i < plats.length; i++) {var p = plats[i]; if(sprtHitTest(p)){if(sprt.yy >= 0){if(sprt.y - sprt.yy -5 > p.t){continue;} sprt.platUnder = p; if(p.t < newY){newY = p.t;} sprt.ju = 0; newYY = 0; if(p.del && sprt.yy >= 11){delPlat.push(p); continue; } } if(sprt.yy < 0 && !p.semi){sprt.y = p.b + sprt.kolH; newY = sprt.y; newYY = 0; } } } sprt.y = newY; sprt.yy = newYY; if(sprt.yy > 1 && !sprt.ju){sprt.ju = 1; } } function removeSettingsButton(){p.visible = false; p.esc.visible = false; } function addSplatterBrick(ob){for (var i = 0; i < 12; i++) {var xx = Math.random() * 10 - 5; var yy = Math.random() * -6 - 6; var rnd = Math.floor(Math.random() * 2); var log = isprt.create(ob.x + ob.width / 2 + xx, ob.y + ob.height / 2 + yy, ob.splatterBricks[rnd]); log.anchor.setTo(0.5, 0.5); log.xx = xx; log.yy = yy; log.rot = Math.random() * 20 - 10; pars.push(log); } } function leftRightCode(){if(sprt.dd){return; } sprt.xx *= 0.8; if(Math.abs(sprt.xx) < 0.5){sprt.xx = 0; } sprt.x += sprt.xx; var newXX = sprt.xx; for (var i = 0; i < plats.length; i++) {var p = plats[i]; if(p.semi){continue;} if(sprtHitTest(p)){if(sprt.xx > 0){newXX = 0; sprt.x = p.l - sprt.kolW; } if(sprt.xx < 0){newXX = 0; sprt.x = p.r + sprt.kolW; } } } sprt.xx = newXX; } function addParLog(ob,xx,yy){var log = isprt.create(ob.x+xx,ob.y+yy, 'log'); log.anchor.setTo(0.5, 0.5); log.animations.add('idle', null, 12); log.play('idle',null,true); log.scale.setTo(-0.5,0.5); if(xx>0){log.scale.setTo(0.5,0.5); } log.xx = xx; log.yy = yy; log.rot = 0; pars.push(log); } function laserCode(){for (var i = 0; i < lasers.length; i++) {var l = lasers[i]; l.ctCurr--; if (l.ctCurr == l.ctSwitch) {l.noKol = true; l.visible = false; } if (l.ctCurr <= 0) {l.noKol = false; l.ctCurr = l.ctMax; l.visible = true; } } } function eneCode(){for (var i = 0; i < enes.length; i++) {var e = enes[i]; e.x +=  e.xx; if (e.x < e.xmin || e.x > e.xmax) {e.xx *=  -1; e.scale.x *=  -1; } e.y +=  e.yy; if (e.y < e.ymin || e.y > e.ymax) {e.yy *=  -1; } getBoundsByOffset(e, e.kol); } } function spikeCode(){if(sprt.dd || sprt.inv > 0){return; } for (var i = 0; i < spikes.length; i++) {var s = spikes[i]; if(s.noKol){continue;} if(sprtHitTest(s)){killSprite(s,1); if(s.bomb){hitBomb(s); spikes.splice(i, 1); } return; } } } function hitBomb(ob){fxPlay(sfx.fxBomb1); spawnBombPar(ob); spawnExplo(ob); bombs.splice(bombs.indexOf(ob), 1); ob.destroy(); } function killRobot(ob){fxPlay(sfx.fxBomb2); spawnRoboPar(ob); spawnExplo(ob); enes.splice(enes.indexOf(ob), 1); ob.destroy(); } function spawnExplo(ob){for(var i=0; i<12 ;i++){var xplo = isprt.create(ob.x, ob.y, 'sheetExplo1'); xplo.animations.add('idle', null, 16); xplo.play('idle', null, false, true); xplo.animations.currentAnim.setFrame(Math.floor(Math.random()*7), true); xplo.anchor.setTo(0.5); xplo.scale.x = xplo.scale.y = Math.random()*0.6+0.4; xplo.angle = Math.random() * 360; xplo.x = xplo.x + Math.random() * 120 - 60; xplo.y = xplo.y + Math.random() * 120 - 120; } } function spawnBombPar(ob){for(var i=0; i < 9; i++){var parMC = isprt.create(ob.x + Math.random() * 120 - 60, ob.y + Math.random() * 120 - 60, 'sheetSplatterBomb'); parMC.anchor.setTo(0.5); parMC.frame = i; parMC.xx = Math.random() * 20 - 10; parMC.yy = Math.random() * -14 - 10; parMC.rot = Math.random() * 40 - 20; pars.push(parMC); } } function spawnRoboPar(ob){for(var i=0; i < 12; i++){var parMC = isprt.create(ob.x + Math.random() * 120 - 60, ob.y + Math.random() * 120 - 120, 'sheetSplatterRobot'); parMC.anchor.setTo(0.5); parMC.scale.x = ob.scale.x; parMC.frame = i; parMC.xx = Math.random() * 20 - 10; parMC.yy = Math.random() * -14 - 10; parMC.rot = Math.random() * 40 - 20; pars.push(parMC); } } function killSprite(ob,n){sprt.ju = 9; if(ob && (ob.bomb || ob.ene)) {if(sprt.x > ob.x) {sprt.scale.x = -0.8; sprt.scaleX = -1; } else {sprt.scale.x = 0.8; sprt.scaleX = 1; } } sprt.xx = sprt.scale.x * -54; sprt.yy = -20; for (var i = 0; i < n; i++){if (nrg.length <= 0){break; } nrg[nrg.length - 1].frame = 1; nrg.length--; if (nrg.length <= 0){break; } } if (nrg.length > 0){sprt.inv = 60; fxPlay(sfx.fxYykes); return; } destroySprite(90); } function destroySprite(ct){fxPlay(sfx.fxYykes); game.ldat.stats.s++; game.camera.xy = [game.camera.x, game.camera.y]; sprt.noControl = true; hideGamePad(); world.doneCT = ct; sprt.bringToTop(); p.bringToTop(); sprt.rot = -sprt.xx * 2.5; sprt.xx = -sprt.xx * 2; sprt.yy = -18; sprt.dd = true; p.visible = false; p.esc.visible = false; } function colgunCode(){if(!sprt.colGun){return;} if(!sprt.dd && sprtHitTest(sprt.colGun)){fxPlay(sfx.fxFanfare); game.ldat.wpn.v = 0.1; sprt.colGun.destroy(); getGun(); } } function getGun(){sprt.colGun=null; sprt.loadTexture('sprtGun', 0); sprt.animations.add('fire', [21,22,23,24,25,26,27,28,29,30,31,32,33], 33); sprt.animations.add('strike', [34,35,36,37,38,39,40,41], 12); sprt.fireCT = 0; sprt.ammo = Math.round(game.ldat.ammo.v*20); dsp.ammo.setText(sprt.ammo); dsp.ammo.sym.visible = true; dsp.ammo.visible = true; if(sprt.ammo > 0 && gamePad){gamePad.aS.visible = true; } } function sprtHitTest(ob){sprt.l = sprt.position.x - sprt.kolW; sprt.r = sprt.position.x + sprt.kolW; sprt.b = sprt.position.y; sprt.t = sprt.position.y - sprt.kolH; if (sprt.l < ob.r && sprt.r > ob.l && sprt.t < ob.b && sprt.b > ob.t) {return true; } return false; } function controlDown(pointer){if(sprt.gameDone){sprt.gameDone = null; game.sound.stopAll(); if(parent && parent.cmgGameEvent){parent.cmgGameEvent('start'); } levl = 0; newState(); return; } sprt.keyDown = true; if(game.paused && !rotDevice){pauseMenClick(pointer); } } function pauseMenClick(pointer){if (p.getBounds().contains(pointer.x, pointer.y)) {clickSound(); p.frame = 0; game.paused = false; muResume(); p.pop.visible = false; sprt.keyDown = null; return; } muteButtons(pointer); for (var i = 0; i < p.btn.length; i++) {var b = p.btn[i]; if (b.getBounds().contains(pointer.x, pointer.y)){if(b.key == 'btnHome'){clickSound(); levl = 0; newState(); } } } } function muteButtons(pointer){if(rotDevice || !game.btnFX || game.btnFX.noControl){return;} if (game.btnMu.getBounds().contains(pointer.x, pointer.y)){clickSound(); if(game.muteMu){game.muteMu = false; } else{game.muteMu = true; } mu.mute = game.muteMu; setMuFXBtns(); return; } if (game.btnFX.getBounds().contains(pointer.x, pointer.y)){clickSound(); if(game.muteFX){game.muteFX = false; } else{game.muteFX = true; } setMuFXBtns(); return; } } function controlUp(pointer){sprt.keyDown = null; } function pointers2Buttons(pointer){if(!pointer.isDown){return; } if (gamePad.aL.getBounds().contains(pointer.x, pointer.y)){gamePad.aL.dwn = true; } if (gamePad.aR.getBounds().contains(pointer.x, pointer.y)){gamePad.aR.dwn = true; } if (gamePad.aU.getBounds().contains(pointer.x, pointer.y)){cursors.jump = true; } if (gamePad.aS.getBounds().contains(pointer.x, pointer.y)){cursors.shoot = true; } } function escCode(){escCheck(game.input.mousePointer); escCheck(game.input.pointer1); escCheck(game.input.pointer2); } function escCheck(pointer){if(!pointer.isDown || !p.esc.visible || sprt.dd){return; } if (p.esc.getBounds().contains(pointer.x, pointer.y)){killSprite(null,99); } } function controls(){if(sprt.noControl){return; } cursors.jump = null; cursors.shoot = false; if(gamePad){gamePad.aL.dwn = false; gamePad.aR.dwn = false; pointers2Buttons(game.input.mousePointer); pointers2Buttons(game.input.pointer1); pointers2Buttons(game.input.pointer2); if(gamePad.aL.dwn){moveSprtLeft(); } if(gamePad.aR.dwn){moveSprtRight(); } } if (cursors.left.isDown || wasd.left.isDown) {moveSprtLeft(); } if (cursors.right.isDown || wasd.right.isDown) {moveSprtRight(); } if (cursors.up.isDown || wasd.up.isDown) {cursors.jump = true; } if(cursors.jump){if(!cursors.hold){sprt.keyDown = true; } cursors.hold = true; } else{cursors.hold = null; sprt.keyDown = null; } if(game.ldat.jmp.v && sprt.keyDown && sprt.ju < jumpMax){fxPlay(sfx.fxJump); sprt.yy = sprt.jh; sprt.ju++; sprt.keyDown = null; } if((spaceKey.isDown || cursors.shoot) && sprt.ammo && sprt.ammo > 0){if(!spaceKey.hold){shoot(); if(!sprt.ju){sprt.yy -= 12; sprt.ju++; } sprt.xx = sprt.scale.x * -8; } spaceKey.hold = true; } else{spaceKey.hold = null; } } function moveSprtLeft(){if(!game.ldat.spd.v){return;} sprt.xx -= sprt.spd; sprt.scale.x = -0.8; sprt.scaleX = -1; } function moveSprtRight(){if(!game.ldat.spd.v){return;} sprt.xx += sprt.spd; sprt.scale.x = 0.8; sprt.scaleX = 1; } function invCode(){sprt.inv--; if (sprt.inv % 8 > 3) {sprt.visible = true; } else {sprt.visible = false; } if (sprt.inv <= 0) {sprt.inv = 0; sprt.visible = true; } } function shoot(){fxPlay(sfx.fxLaser); sprt.ammo--; dsp.ammo.setText(sprt.ammo); if(sprt.ammo <= 0 && gamePad){gamePad.aS.visible = false; } sprt.fireCT = 14; var b = isprt.create(sprt.x, sprt.y - 60, 'bullet'); sprt.parent.setChildIndex(b, sprt.z); b.anchor.setTo(1,0.5); b.xx = sprt.scaleX * 20; b.scale.x = (sprt.scaleX * (1 + game.ldat.gunpow.v * 1.5)) * 0.3; b.scaleX = sprt.scaleX; b.x = sprt.x + b.width + b.scaleX * 20; b.scale.y = (game.ldat.gunpow.v * 2 + 1) * 0.4; if(b.scaleX > 0){b.kol = {l:-Math.abs(b.width), t:-12, r:0, b:12}; } else{b.kol = {l:0, t:-12, r:Math.abs(b.width), b:12}; } getBoundsByOffset(b, b.kol); bullets.push(b); } function bulletCode(){for (var i = 0; i < bullets.length; i++) {var b = bullets[i]; b.x += b.xx; getBoundsByOffset(b, b.kol); bulletHitWall(b); bulletHitEnemy(b); if(b.dd){fxPlay(sfx.fxRico); fxPlay(sfx.fxBoulder); spawnBulletSplat(b); b.destroy(); bullets.splice(i,1); i--; continue; } if(b.x < game.camera.x - 120 || b.x > game.camera.x + game.camera.width + 120){b.destroy(); bullets.splice(i,1); i--; continue; } } } function bulletHitWall(b){for (var i = 0; i < plats.length; i++) {var p = plats[i]; if (hitTestAB(b,p)){b.dd = p; if(b.xx > 0){b.x = p.l; } else{b.x = p.r; } return true; } } } function bulletHitEnemy(b){if(b.dd){return;} for (var i = 0; i < spikes.length; i++) {var e = spikes[i]; if(e.noKol){continue;} if (hitTestAB(b,e)){b.dd = e; if(b.xx > 0){b.x = e.l; } else{b.x = e.r; } killEnemy(e,b); return; } } } function killEnemy(e,b){if(e.robot){killRobot(e); spikes.splice(spikes.indexOf(e), 1); } if(e.bomb){hitBomb(e); spikes.splice(spikes.indexOf(e), 1); } if(e.boss){bossHit(b); } } function spawnBulletSplat(b){var ob = isprt.create(b.x, b.y, 'sheetBulletSplat'); sprt.parent.setChildIndex(ob, sprt.z); ob.animations.add('idle', null, 12); ob.play('idle',null,false,true); ob.anchor.setTo(0.8,0.5); ob.scale.x = b.scale.x; ob.scale.y = b.scale.y; } function hitTestAB(a,b){if (a.l < b.r && a.r > b.l && a.t < b.b && a.b > b.t){return true; } return false; } function saniCode(){if(!game.ldat.spd.v && !sprt.dd){qmCode(); return; } var sani = "idle"; if(sprt.xx != 0){sani = 'run'; } if(sprt.ju){sani = "jump"; if(sprt.yy > 0){sani = "fall"; } } if(sprt.fireCT > 0){sani = "fire"; sprt.fireCT--; } if (sprt.inv > 30){sani = "dd"; } if(sprt.dd){sprt.angle += 3 * -sprt.scale.x; sani = "dd"; } if(isprt.go){sani = "strike"; } if(sprt.animations.name != sani){sprt.play(sani,null,true); } if(sani == 'run'){if(sprt.frame == 6 && sprt.framePrev != sprt.frame){fxPlay(sfx.fxStep1); } if(sprt.frame == 12 && sprt.framePrev != sprt.frame){fxPlay(sfx.fxStep2); } sprt.framePrev = sprt.frame; } } function qmCode(){if(!sprt.qm && tim < 2){fxPlay(sfx.fxHuh); sprt.play('qm',null,true); sprt.qm = isprt.create(sprt.x, sprt.y - 90, 'qm'); sprt.qm.anchor.setTo(0.5,1); } } function parCode(){for (var i = 0; i < pars.length; i++) {var p = pars[i]; p.angle += p.rot; p.x += p.xx; p.y += p.yy; p.yy += 1; p.xx = p.xx * 0.98; if(p.y > world.limB + 200){pars.splice(i,1); if(p != sprt){p.destroy(); } i--; } } } function bgCode(){world.bg1.tilePosition.x = game.camera.x * -0.2; world.bg1.tilePosition.y = game.camera.y * -0.2; world.bg2.tilePosition.x = game.camera.x * -0.4; world.bg2.tilePosition.y = game.camera.y * -0.4; } function quakeCode(){if(world.q){if(game.camera.xy){game.camera.x = game.camera.xy[0]; game.camera.y = game.camera.xy[1]; } game.camera.x += Math.random() * world.q - world.q/2; game.camera.y += Math.random() * world.q - world.q/2; world.q -= 1; if(world.q < 0){world.q = null; } } }